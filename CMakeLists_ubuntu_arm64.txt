# Optimized CMakeLists.txt for Ubuntu ARM64 CLI Build
# Designed for Oracle Cloud VPS without GPU support
# Error-free configuration with Qt6 and ARM64 optimizations

CMAKE_MINIMUM_REQUIRED(VERSION 3.21.0)

# Set ARM64 architecture and disable OpenGL
SET(ST_ARCH "ARM")
SET(ST_SUPPRESS_OPENGL TRUE)
SET(ST_USE_QT6 ON)

IF(POLICY CMP0003)
    CMAKE_POLICY(SET CMP0003 NEW)
ENDIF()

IF(POLICY CMP0048)
    CMAKE_POLICY(SET CMP0048 NEW)
ENDIF()

SET(
    CMAKE_USER_MAKE_RULES_OVERRIDE
    "${CMAKE_SOURCE_DIR}/cmake/default_cflags.cmake"
)
SET(
    CMAKE_USER_MAKE_RULES_OVERRIDE_CXX
    "${CMAKE_SOURCE_DIR}/cmake/default_cxxflags.cmake"
)

PROJECT("Scan Tailor Experimental CLI")

# ARM64 specific settings
MATH(EXPR ST_ARCH_BITS "${CMAKE_SIZEOF_VOID_P} * 8")
SET(ST_FULLARCH "${ST_ARCH}${ST_ARCH_BITS}")

include_directories(src)

# Keep the paths outside of the build directory in RPATH
SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
SET(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib/scantailor-experimental")

SET(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake/modules")

# ARM64 optimizations
IF(CMAKE_SYSTEM_PROCESSOR MATCHES "aarch64")
    ADD_DEFINITIONS(-DARM64_OPTIMIZED)
ENDIF()

IF(DEBUG_CLI)
    ADD_DEFINITIONS(-DDEBUG_CLI)
ENDIF(DEBUG_CLI)

ENABLE_TESTING()

# Configure version
CONFIGURE_FILE(
    "${PROJECT_SOURCE_DIR}/src/version.h"
    "${PROJECT_BINARY_DIR}/src/.version.h" COPYONLY
)

IF(NOT "${PROJECT_BINARY_DIR}" STREQUAL "${PROJECT_SOURCE_DIR}")
    FILE(REMOVE "${PROJECT_BINARY_DIR}/src/version.h")
ENDIF()

# Extract version information
FILE(READ "${PROJECT_SOURCE_DIR}/src/version.h" version_h_contents)
STRING(
    REGEX REPLACE
    ".*#define[ \\t]+STFAMILY[ \\t]+\"([^\"]*)\".*"
    "\\1" ST_FAMILY "${version_h_contents}"
)
IF("${ST_FAMILY}" STREQUAL "${version_h_contents}")
    MESSAGE(FATAL_ERROR "Failed to extract STFAMILY from version.h")
ENDIF()

STRING(
    REGEX REPLACE
    ".*#define[ \\t]+VERSION[ \\t]+\"(([0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+)?)\".*"
    "\\1" ST_VERSION "${version_h_contents}"
)
IF("${ST_VERSION}" STREQUAL "${version_h_contents}")
    MESSAGE(FATAL_ERROR "Failed to extract VERSION from version.h")
ENDIF()

# Include directories
INCLUDE_DIRECTORIES(src src/foundation src/math src/interaction src/zones)
INCLUDE_DIRECTORIES("${CMAKE_CURRENT_BINARY_DIR}" "${CMAKE_CURRENT_BINARY_DIR}/src")

INCLUDE(CheckIncludeFile)
INCLUDE(CheckIncludeFileCXX)
INCLUDE(TestCXXAcceptsFlag)
INCLUDE(CMakeDependentOption)
INCLUDE(cmake/SetDefaultBuildType.cmake)
INCLUDE(cmake/SetDefaultGccFlags.cmake)
INCLUDE(cmake/ToNativePath.cmake)
INCLUDE(cmake/UpdateTranslations.cmake)
INCLUDE(cmake/CopyToBuildDir.cmake)
INCLUDE(cmake/LibToDLL.cmake)

ST_SET_DEFAULT_BUILD_TYPE(Release)
IF(CMAKE_COMPILER_IS_GNUCC)
    ST_SET_DEFAULT_GCC_FLAGS()
ENDIF(CMAKE_COMPILER_IS_GNUCC)

# Disable OpenGL and OpenCL for ARM64 CLI
SET(ENABLE_OPENGL OFF)
SET(ENABLE_OPENCL OFF)

# Find Eigen3
FIND_PACKAGE(Eigen3 REQUIRED)
INCLUDE_DIRECTORIES(SYSTEM ${EIGEN3_INCLUDE_DIR})
add_compile_options(-DEIGEN_MPL2_ONLY)
ADD_DEFINITIONS(-DEIGEN_DONT_ALIGN_STATICALLY)

# Qt6 configuration for ARM64
SET(CMAKE_AUTOMOC ON)
SET(qt_min_version 6.2.2)
FIND_PACKAGE(Qt6Core ${qt_min_version} REQUIRED)
FIND_PACKAGE(Qt6Gui ${qt_min_version} REQUIRED)
FIND_PACKAGE(Qt6Widgets ${qt_min_version} REQUIRED)
FIND_PACKAGE(Qt6Xml ${qt_min_version} REQUIRED)
FIND_PACKAGE(Qt6Network ${qt_min_version} REQUIRED)
FIND_PACKAGE(Qt6LinguistTools ${qt_min_version} REQUIRED)

# Image libraries
FIND_PACKAGE(ZLIB REQUIRED)
INCLUDE_DIRECTORIES("${ZLIB_INCLUDE_DIR}")

FIND_PACKAGE(TIFF REQUIRED)
INCLUDE_DIRECTORIES("${TIFF_INCLUDE_DIR}")

FIND_PACKAGE(JPEG REQUIRED)
INCLUDE_DIRECTORIES("${JPEG_INCLUDE_DIR}")

# Boost for testing (optional)
IF(NOT ST_NO_TESTS STREQUAL "ON")
    ADD_DEFINITIONS(-DBOOST_TEST_DYN_LINK)
    SET(Boost_USE_MULTITHREADED ON)
    FIND_PACKAGE(Boost 1.70.0 COMPONENTS unit_test_framework)
    IF(Boost_FOUND)
        INCLUDE_DIRECTORIES(SYSTEM ${Boost_INCLUDE_DIRS})
        LINK_DIRECTORIES(${Boost_LIBRARY_DIRS})
    ENDIF()
ENDIF()

# Threading
FIND_PACKAGE(Threads REQUIRED)
SET(EXTRA_LIBS ${CMAKE_THREAD_LIBS_INIT})

# ARM64 specific optimizations
IF(CMAKE_SYSTEM_PROCESSOR MATCHES "aarch64")
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -march=armv8-a -mtune=cortex-a72")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=armv8-a -mtune=cortex-a72")
    
    # Oracle Cloud Ampere optimization
    IF(EXISTS "/sys/hypervisor/uuid")
        FILE(READ "/sys/hypervisor/uuid" hypervisor_uuid)
        IF(hypervisor_uuid MATCHES "oracle")
            SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -march=armv8.2-a -mtune=neoverse-n1")
            SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=armv8.2-a -mtune=neoverse-n1")
            MESSAGE(STATUS "Oracle Cloud Ampere optimizations enabled")
        ENDIF()
    ENDIF()
ENDIF()

# Compiler-specific flags
IF(CMAKE_COMPILER_IS_GNUCXX)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17 -Wall -Wextra")
    SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3 -DNDEBUG -ffast-math -funroll-loops")
ENDIF()

# Add subdirectories
ADD_SUBDIRECTORY(src)

# CLI-specific configuration
SET(CLI_ONLY ON)
ADD_DEFINITIONS(-DCLI_ONLY)

# Packaging
SET(CPACK_PACKAGE_NAME "scantailor-experimental-cli")
SET(CPACK_PACKAGE_VERSION "${ST_VERSION}")
SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "ScanTailor Experimental CLI for ARM64")
SET(CPACK_GENERATOR "DEB")
SET(CPACK_DEBIAN_PACKAGE_MAINTAINER "ScanTailor Team")
SET(CPACK_DEBIAN_PACKAGE_DEPENDS "libqt6core6, libqt6gui6, libqt6widgets6, libqt6xml6, libtiff6, libjpeg8, libpng16-16, zlib1g")
INCLUDE(CPack)